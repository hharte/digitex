.Z80
.ASEG

; Disassembly of the file "digitex.bin"
; 
; CPU Type: Z80
; 
; Created with dZ80 2.0
; 
; on Wednesday, 31 of March 2004 at 04:54 PM
; 

pbase:

    .phase  0f000h

promsiz equ 800h

NULL    EQU 00H
CR      EQU 10H
LF      EQU 13H

FDSTAT  EQU 0CH
FDTRK   EQU 0DH
FDSEC   EQU 0EH
FDDATA  EQU 0FH
WAIT    EQU 14H
BAUDRD  EQU 15H                 ; Read: Baud rate DIP switch S7
EXTADR  EQU 15H                 ; Write: S-100 Extended Addressing bits 23:16
MEMCTL0 EQU 16H
MEMCTL1 EQU 17H
BAUDWR  EQU 18H

HDDAT   EQU 0E0H
HDERG   EQU 0E1H
HDSCNT  EQU 0E2H
HDSEC   EQU 0E3H
HDCYLO  EQU 0E4H
HDCYHI  EQU 0E5H
HDSDH   EQU 0E6H
HDCMD   EQU 0E7H

ZECHO   EQU 0EE01H
FDRDFG  EQU 0EE01H
CURADR  EQU 0EE02H
LEE04   EQU 0EE04H              ; 6F3E = LD A,6FH
FDCURSC EQU 0EE08H              ; Current sector of the floppy drive.

STACK   EQU 0EE64H
SYSBASE EQU 0BFFCH

        JP      START
        JP      PR$CHAR         ; Echoes a character on the console serial port.
        JP      GET$CHAR        ; Waits for a serial port character to be input.
        JP      INKEY           ; Returns serial character if available, but does not wait for it.
        JP      GETCHE          ; Get a character from the Console port, and if printable, echo it.
        JP      PR$MSG          ; Prints a NULL terminated string on the console.
        JP      PR$CRLF         ; Prints a CR,LF to the console serial port.
        JP      PR$SPACE
        JP      PR$HEX1
        JP      PR$HEX          ; Print Hex Byte in A
        JP      PR$WRD          ; Print Hex Word in HL
        JP      RD$HEX2N        ; Read 2 Hex Digits into A
        JP      RD$HEX4N        ; Read 4 Hex Digits
        JP      LF177
        JP      TESTMEM
        JP      NEGDE
        JP      HBOOTER
        JP      FBOOTER
        JP      INP
        JP      OUTP

START:  
        IN      A,(BAUDRD)          ; Read baud rate from J7
        OUT     (BAUDWR),A          ; Set baud rate
        BIT     6,A
        JR      Z,USERAM            ; Bit 6=0, use on-board memory

; Use RAM on the S-100 bus, by disabling all on-board RAM.
NORAM:  XOR     A
        OUT     (EXTADR),A          ; Set S-100 A[23:16] address lines
        OUT     (40H),A
        OUT     (MEMCTL1),A         ; Disable Upper 64K RAM
        LD      A,40H
        OUT     (MEMCTL0),A         ; Disable Lower 64K RAM, keep ROM enabled
        LD      HL,603EH
        JR      LF05E                   ; (+0ah)

; Use on-board RAM, enable all RAM in lower 64K RAM.
USERAM: XOR     A
        OUT     (MEMCTL1),A
        LD      A,4FH
        OUT     (MEMCTL0),A
        LD      HL,6F3EH

lf05e:  LD      (LEE04),HL
        XOR     A
        LD      (FDRDFG),A
        LD      SP,STACK
        LD      HL,0F3CAH
        LD      BC,0801H
        OTIR    

        LD      HL,SIGNON
        CALL    PR$MSG
        JP      BOOT            ; Attempt to boot.

;---------------------
; Top of command loop
;---------------------
MONITOR:  
        LD      SP,STACK        ; Set up stack
        LD      HL,PROMPT       ; Display prompt
        CALL    PR$MSG
        CALL    GETCHE          ; Get character from console and echo it.
        LD      B,A
        LD      HL,CMDTABLE
lf089:  LD      A,(HL)
        CP      0FFH            ; Are we at the end of the table?
        JR      Z,GOTCMD        ; Yes, print 'UNDEFINED' message
        CP      B               ; Do we have a command match?
        JR      Z,CMD$MATCH     ; (+0dh)
        INC     HL
        INC     HL
        INC     HL
        JR      LF089                   ; (-0dh)
GOTCMD: LD      HL,UNDEFD
lf099:  CALL    PR$MSG
        JR      MONITOR                   ; (-25h)
CMD$MATCH:
        INC     HL
        LD      E,(HL)
        INC     HL
        LD      D,(HL)
        EX      DE,HL
        JP      (HL)

; Print character on the Console Serial Port
PR$CHAR:
        PUSH    AF
TXR$LP:  
        IN      A,(01H)         ; Get transmitter status
        AND     04H             ; Is transmitter ready?
        JR      Z,TXR$LP        ; No, keep waiting
        POP     AF              ; restore character to output
        OUT     (00H),A         ; Send it to UART
        RET     

INKEY:  
        IN      A,(01H)         ; Get receiver status
        AND     01H             ; Is a character waiting?
        RET     Z               ; No Rx character pending, return
        JR      IN$CHAR         ; Character pending, go get it...

GET$CHAR:  
        IN      A,(01H)         ; Get receiver status
        AND     01H             ; Is a character waiting?
        JR      Z,GET$CHAR      ; No, keep waiting
IN$CHAR:
        IN      A,(00H)         ; Read character from serial port.
        AND     7FH             ; mask off parity bit
        CP      'a'
        RET     C

        CP      7BH             ; 'DEL' character
        RET     NC

        AND     5FH ; 
        RET     

GETCHE: LD      A,0FFH
        LD      (ZECHO),A
        CALL    GET$CHAR
        PUSH    AF
        LD      A,(ZECHO)
        AND     A
        JR      NZ,LF0DA                ; (+02h)
        POP     AF
        RET     

lf0da:  POP     AF
        CP      20H
        CALL    NC,PR$CHAR
        RET     

PR$MSG: PUSH    AF
        PUSH    HL
MSG$LP: LD      A,(HL)
        OR      A
        JR      Z,MSG$DONE              ; (+06h)
        CALL    PR$CHAR
        INC     HL
        JR      MSG$LP                  ; (-0ah)
MSG$DONE:
        POP     HL
        POP     AF
        RET     

PR$CRLF:  
        PUSH    HL
        LD      HL,CRLF
        CALL    PR$MSG
        POP     HL
        RET     

lf0f9:  CALL    INKEY
        CP      1BH
        JP      Z,MONITOR
        CP      08H
        RET     NC

        JR      LF0F9                   ; (-0dh)
PR$SPACE:  PUSH    AF
        LD      A,20H
        JR      LF11D                   ; (+12h)
PR$HEX: PUSH    AF
        RRCA    
        RRCA    
        RRCA    
        RRCA    
        CALL    PR$HEX1
        POP     AF
PR$HEX1: PUSH    AF
        AND     0FH
        ADD     A,90H
        DAA     
        ADC     A,40H
        DAA     
lf11d:  CALL    PR$CHAR
        POP     AF
        RET     

PR$WRD:  PUSH    AF
        LD      A,H
        CALL    PR$HEX
        LD      A,L
        CALL    PR$HEX
        POP     AF
        RET     

RD$HEX2N:  CALL    GETCHE
        CP      ','
        RET     Z               ; end of #

        CP      ' '
        RET     Z               ; end of #

        CP      '0'
        RET     C               ; < 0, whoops

        CP      ':'
        JP      C,ISNUM         ; < 9
        CP      'A'
        RET     C               ; whoops

        CP      'G'             ; < 'F'
        CCF     
        RET     C               ; whoops

        SUB     07H             ; convert A - F
ISNUM:  SUB     30H             ; decode
        RET     


RD$HEX4N:
        PUSH    BC
        PUSH    DE
        LD      C,00H
        LD      E,00H
NLOOP:  CALL    RD$HEX2N
        JR      NC,NISNUM               ; (+0eh)
        CP      CR              ; Carriage return?
        SCF     
        JR      NZ,BAD4N                ; (+1ah)
        LD      A,E
        OR      A
        JR      NZ,GOT2N                ; (+15h)
        SCF     
        LD      A,0DH
        JR      BAD4N                   ; (+11h)
NISNUM: CP      16              ; Is it a number?
        JR      NC,GOT2N        ; no, jump

        INC     E               ; inc it

        LD      B,A             ; save #

        LD      A,C             ; get old
        ADD     A,A             ; *2
        ADD     A,A             ; *4
        ADD     A,A             ; *8
        ADD     A,A             ; *16
        ADD     A,B             ; add in new #
        LD      C,A             ;    -- and all to c
        JP      NLOOP
GOT2N:  LD      A,C
BAD4N:  POP     DE
        POP     BC
        RET     

lf177:  PUSH    DE
        LD      HL,0000H
        SCF     
        CCF     
        PUSH    AF
lf17e:  CALL    RD$HEX2N
        JR      NC,LF190                ; (+0dh)
        CP      0DH
        JR      NZ,LF18C                ; (+05h)
        CALL    PR$SPACE
        JR      LF19E                   ; (+12h)
lf18c:  POP     AF
        SCF     
        POP     DE
        RET     

lf190:  CP      10H
        JR      NC,LF19E                ; (+0ah)
        ADD     HL,HL
        ADD     HL,HL
        ADD     HL,HL
        ADD     HL,HL
        LD      E,A
        LD      D,00H
        ADD     HL,DE
        JR      LF17E                   ; (-20h)
lf19e:  POP     AF
        POP     DE
        RET     

TESTMEM: LD      (HL),A
        CP      (HL)
        RET     Z

        PUSH    HL
        LD      HL,MWERR        ; Memory write error.
        CALL    PR$MSG
        POP     HL
        CALL    PR$WRD
        JP      MONITOR
LOAD:
        CALL    LF177
        JP      NC,LF1BE
lf1b8:  LD      HL,QMARKS
        JP      LF099
lf1be:  LD      (CURADR),HL
DOT:    CALL    PR$CRLF
        LD      HL,(CURADR)
        CALL    PR$WRD
        CALL    PR$SPACE
        LD      A,(HL)
        CALL    PR$HEX
        CALL    PR$SPACE
        CALL    RD$HEX4N
        JP      C,LF1E4
        CALL    TESTMEM
lf1dd:  LD      HL,(CURADR)
        INC     HL
        JP      LF1BE
lf1e4:  CP      0DH
        JP      Z,MONITOR
        CP      20H
        JP      Z,LF1DD
        CP      2DH
        JP      NZ,LF1B8
DASH:   LD      HL,(CURADR)
        DEC     HL
        JP      LF1BE
;-----------
; Negate DE
;-----------
NEGDE:  PUSH    AF
        LD      A,D
        CPL     
        LD      D,A
        LD      A,E
        CPL     
        LD      E,A
        INC     DE
        POP     AF
        RET     

DUMP:   CALL    GET4DE
        CALL    GET4DE
        CALL    NEGDE
lf20d:  CALL    PR$CRLF
        CALL    PR$WRD
        CALL    PR$SPACE
lf216:  CALL    PR$SPACE
        LD      A,(HL)
        CALL    PR$HEX
        CALL    LF23F
        CALL    CHK$CHAR
        CP      13H
        CALL    Z,LF0F9
        LD      A,L
        AND     0FH
        JP      Z,LF20D
        JP      LF216

GO:     CALL    GET4DE
        EX      DE,HL
        JP      (HL)
HELP:   LD      HL,HELP$MSG
        CALL    PR$MSG
        JP      MONITOR
lf23f:  PUSH    HL
        ADD     HL,DE
        JP      C,MONITOR
        POP     HL
        INC     HL
        RET     

MOVE:   CALL    GET4DE
        PUSH    DE
        CALL    GET4DE
        CALL    GET4DE
        EX      DE,HL
        EX      (SP),HL

        CALL    NEGDE
MLOOP:  LD  A,(HL)
        EX  (SP),HL
        CALL    TESTMEM
        INC     HL
        EX      (SP),HL
        CALL    LF23F
        CALL    CHK$CHAR
        JP      MLOOP

FILL:   CALL    GET4DE
        CALL    GET4DE
        CALL    NEGDE
        CALL    RD$HEX4N
        JP      C,LF1B8
lf275:  CALL    TESTMEM
        CALL    LF23F
        JP      LF275
GET4DE:  CALL    LF177
        JP      C,LF1B8
        EX      DE,HL
        RET     

CHK$CHAR:  
        CALL    INKEY
        OR      A
        JP      NZ,MONITOR
        RET     

INP:    CALL    RD$HEX4N
        JP      C,LF1B8
        LD      C,A
        IN      A,(C)
        CALL    PR$CRLF
        CALL    PR$HEX
        JP      MONITOR
OUTP:   CALL    RD$HEX4N
        JP      C,LF1B8
        LD      C,A
        CALL    RD$HEX4N
        JP      C,LF1B8
        OUT     (C),A
        JP      MONITOR

; This routine attempts to boot floppy and hard disk drives.
; The floppy is attempted first.  If a floppy is not inserted,
; the hard disk boot is attempted.
;
; For the Floppy boot, J7 is used to determine whether the
; floppy drive is 8" or 5.25".  If the floppy is 8", then
; the first three sectors are read from the floppy in SD mode into
; RAM at C000h.  Following a successful read, control is transferred
; to 0BFFCH.
;
; The opcodes at 0BFFCH-0BFFFH are to disable the PROM, and enable
; all RAM banks:
; 0BFFCH: LD    A,6FH
; 0BFFEH: OUT   (MEMCTL0),A
;
; The hard disk boot reads the bootstrap into 8000h, copies LD A,6FH
; over the first two bytes of the boostrap, and starts
; execution at that 8000H.  The next two bytes of the bootstrap must
; be: OUT   (MEMCTL0),A
;
; If no floppy or hard disks are present, this routine retries in a
; loop, until the user presses a key on the terminal.
BOOT:   CALL    CHK$CHAR
        CALL    FDTYPE          ; Determine Floppy type and issue RESTORE
        CALL    HDINIT          ; Initialize Hard Disks

BOOTRTY:
        CALL    CHK$CHAR
        CALL    FDRDY
        CALL    HDREAD
        JR      BOOTRTY                 ; (-0bh)

FDTYPE: IN      A,(15H)         ; Read J7 Jumpers to determine config.
        LD      B,A
        LD      A,18H           ; 5.25" Double-Density
        BIT     4,B             ; Test J7-5
        JR      NZ,FDRST        ; J7-5 is on, use 5.25"
        XOR     A               ; 8" Single-Density

; RESTORE command to floppy drive
FDRST:  LD      (0EE06H),A      ; Drive Unit/type to boot
        OUT     (WAIT),A        ; Store Drive Control Register
        LD      A,0BH
        OUT     (FDSTAT),A      ; RESTORE command
        NOP     
        IN      A,(WAIT)
        IN      A,(FDSTAT)      ; Read FDC Status
        AND     80H             ; Check NOT_READY bit
        RET     Z

        XOR     A
        LD      (0EE06H),A
        OUT     (WAIT),A
        RET     

;-------------
; Ready check
;-------------
FDRDY:  IN      A,(FDSTAT)      ; Read FDC Status
        RLA     
        RET     C               ; Drive not ready

        LD      HL,03E8H
IDXLOP: IN      A,(FDSTAT)
        AND     02H             ; Index found?
        JR      Z,IDXFND        ; no, jump
        DEC     HL
        LD      A,L
        OR      H
        JR      NZ,IDXLOP
        RET     


IDXFND: LD      B,0AH
IDXLP1: LD      HL,3E80H
IDXLP2: IN      A,(FDSTAT)
        AND     02H             ; Check for INDEX pulse
        JR      NZ,FDREAD
        DEC     HL
        LD      A,L
        OR      H
        JR      NZ,IDXLP2
        DJNZ    IDXLP1
        RET

;------------------
; Floppy disk read
;------------------
FDREAD: LD      A,0FFH          ; indicate attempt to read
        LD      (FDRDFG),A
        LD      A,01H           ; set sector 1
        LD      HL,0C000H
SECLP:  LD      (FDCURSC),A     ; Current FD sector
        OUT     (FDSEC),A
        LD      A,8CH           ; Read RECORD
        OUT     (FDSTAT),A
        NOP     
READLOOP:
        IN      A,(WAIT)
        OR      A
        JP      P,IODONE
        IN      A,(FDDATA)
        LD      (HL),A
        INC     HL
        JR      READLOOP                ; (-0ch)
IODONE: IN      A,(FDSTAT)
        OR      A
        JR      NZ,LF34C                ; (+19h)
        LD      A,(FDCURSC)
        INC     A
        CP      04H             ; Read 3 sectors.
        JR      NZ,SECLP
        LD      HL,(LEE04)
        LD      (SYSBASE),HL
        LD      HL,(0F34AH)
        LD      (0BFFEH),HL
        JP      SYSBASE

lf34a:  OUT     (MEMCTL0),A     ; Disable PROM

lf34c:  PUSH    AF
        LD      A,(FDRDFG)
        OR      A
        JR      Z,LF360                 ; (+0dh)
FBOOTER:
        LD      HL,FDCERR       ; FDC Error
        CALL    PR$MSG
        POP     AF
        CALL    PR$HEX
        JP      MONITOR
lf360:  POP     AF
        LD      HL,INSDSK
        CALL    PR$MSG
        LD      A,0FFH
        LD      (FDRDFG),A
        JP      MONITOR

; Initialize Hard Disks
HDINIT: XOR     A
        OUT     (HDSDH),A
        LD      A,08H
        OUT     (HDSDH),A
        LD      A,10H
        OUT     (HDSDH),A
        LD      A,18H
        OUT     (HDSDH),A
        XOR     A
        OUT     (HDSDH),A
        OUT     (HDSEC),A
        OUT     (HDCYLO),A
        OUT     (HDCYHI),A
        INC     A
        OUT     (HDSCNT),A
        LD      A,70H
        OUT     (HDCMD),A
        RET     

;----------------
; Hard disk read
;----------------
HDREAD: IN      A,(HDCMD)
        AND     50H
        CP      50H             ; Ready & seek complete?
        RET     NZ              ; No, exit

        IN      A,(HDCMD)
        OR      A               ; busy?
        RET     M               ; yes, exit

        XOR     A
        OUT     (HDSDH),A       ; set sdh
        LD      A,20H           ; read sector cmd
        OUT     (HDCMD),A

HDBZLP: IN      A,(HDCMD)       ; Read sector from HDC
        OR      A               ; busy?
        JP      M,HDBZLP        ; Yes, loop
        AND     01H             ; Error?
        JR      NZ,HBOOTER      ; Yes, jump

        LD      HL,8000H        ; Read HD bootstrap to 8000H
        LD      BC,HDDAT        ; Read 256 bytes from HDDAT (B=0, C=HDDAT port).
        INIR    
        LD      HL,(LEE04)
        LD      (8000H),HL      ; Copy LD A,06FH to 8000H
        JP      8000H           ; Jump to hard disk bootstrap.

HBOOTER:
        LD      HL,HDCERR
        CALL    PR$MSG
        IN      A,(HDERG)
        CALL    PR$HEX
        JP      MONITOR

        JR      LF3D0                   ; (+04h)
        LD      B,H
        INC     BC
        POP     BC
        DEC     B
lf3d0:  JP      PE,0D00H

SIGNON: DEFB    CR,LF,LF,LF,'DIGITEX Monitor version 1.2.A -- 10/06/83'
        DEFB    CR,LF,LF,'Press "H" for Help'
        DEFB    CR,LF,LF,'Attempting to boot...'
        DEFB    CR,LF,'Press any key to abort boot.'
        DEFB    CR,LF,NULL

PROMPT: DEFB    CR,LF,' >',NULL
UNDEFD: DEFB    ' UNDEFINED', NULL
QMARKS: DEFB    ' ????',NULL
MWERR:  DEFB    CR,CR,LF,'MEMORY WRITE ERROR AT ',NULL
ERRMSG: DEFB    'ERROR',NULL
PAUMSG: DEFB    ' PAUSE',NULL
QMARK:  DEFB    '? ',NULL
ABTMSG: DEFB    ' ABORTED',NULL
SADMSG: DEFB    'STARTING ADDRESS:',NULL
EADMSG: DEFB    'ENDING ADDRESS:',NULL
FDCERR: DEFB    CR,LF,'FDC COLD BOOT ERROR CODE ',NULL
INSDSK: DEFB    CR,LF,'INSERT DISK & PRESS B TO BOOT',NULL
HDCERR: DEFB    CR,LF,'HDC1001 COLD BOOT ERROR CODE ',NULL
CRLF:   DEFB    CR,LF,NULL
HELP$MSG:       DEFB    CR,LF,'MONITOR COMMANDS :'
        DEFB    CR,LF,0C2H,'               ',0BDH,' LOAD DISK BOOT LOADER'
        DEFB    CR,LF,'DSSSS,QQQQ      = DUMP MEMORY IN HEX FROM S TO Q'
        DEFB    CR,LF,'FSSSS,QQQQ,BB   = FILL MEMORY FROM S TO Q WITH B'
        DEFB    CR,LF,'GAAAA           = GO TO ADDRESS A'
        DEFB    CR,LF,'IPP             = INPUT FROM PORT P'
        DEFB    CR,LF,'LAAAA           = LOAD MEMORY STARTING AT A'
        DEFB    CR,LF,'MSSSS,QQQQ,DDDD = MOVE STARTING AT S TO Q TO ADDR. D'
        DEFB    CR,LF,'OPP,DD          = OUTPUT DATA D TO PORT P'
        DEFB    CR,LF,'ESC WILL TERMINATE ANY COMMAND',NULL

CMDTABLE:
        DEFB    'L'
        DEFW    LOAD
        DEFB    CR
        DEFW    MONITOR
        DEFB    '.'
        DEFW    DOT
        DEFB    '-'
        DEFW    DASH
        DEFB    'D'
        DEFW    DUMP
        DEFB    'I'
        DEFW    INP
        DEFB    'O'
        DEFW    OUTP
        DEFB    'F'
        DEFW    FILL
        DEFB    'G'
        DEFW    GO
        DEFB    'M'
        DEFW    MOVE
        DEFB    'H'
        DEFW    HELP
        DEFB    'B'
        DEFW    BOOT
        DEFB    0FFH

.dephase

    ds  promsiz-($-pbase)

.END
